require('dotenv').config();   // Cargar variables de entorno desde .env
const fs = require('fs');     // M√≥dulo para manejar el sistema de archivos
const path = require('path'); // M√≥dulo para manejar rutas de archivos
const readline = require('readline-sync'); // M√≥dulo para leer la entrada del usuario desde la consola
const OpenAI = require("openai");          // M√≥dulo para interactuar con la API de OpenAI

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Ruta relativa al archivo
const rutaTeoria = path.join(__dirname, '../contenido-asignatura/completos/teoria.txt');
const rutaEjercicios = path.join(__dirname, '../contenido-asignatura/completos/ejercicios.txt');

let temario = '';
try {
  temario = fs.readFileSync(rutaTeoria, 'utf8');
  ejercicios = fs.readFileSync(rutaEjercicios, 'utf8');
  // console.log('‚úÖ Archivos le√≠dos correctamente.');
} catch (err) {
  console.error('‚ùå No se han podido leer los archivos.', err.message);
  process.exit(1);
}

// üü¢ Mensaje de bienvenida
console.log(`
\n\tüéâ ¬°Hola! Bienvenido/a al Chatbot de C üë®‚Äçüè´üë©‚Äçüíª
\n\tEstoy aqu√≠ para ayudarte a aprender programaci√≥n en lenguaje C de forma sencilla y entretenida.
\n\tPuedes preguntarme sobre teor√≠a, ejercicios, errores, preparaci√≥n de examen... ¬°lo que necesites!

\n\tüëá Primero dime cu√°l es tu nivel para adaptarme mejor a ti\t
`);

const nivel = readline.question("¬øCu√°l es tu nivel en programaci√≥n en C? (b√°sico/intermedio/avanzado): ").toLowerCase();

let contexto = `Act√∫a como un profesor experto en programaci√≥n en lenguaje C.

Si el estudiante pregunta por algo que NO est√© relacionado con la programaci√≥n en el lenguaje C, responde de forma clara y educada que solo puedes ayudar con temas relacionados con la programaci√≥n en C.

Adapta tus respuestas al nivel del estudiante: ${nivel}, donde: 
B√°sico: Nivel b√°sico donde solo saben los tipos de datos y variables que existen, los pasos b√°sicos de resoluci√≥n de un problema, lo que es un algoritmo, estructuras de control en C (como if, do-while, while, switch, for)
Intermedio: Nivel medio donde ya saben un poco m√°s sobre programaci√≥nadem√°s de los tipos de datos y variables que existen, los pasos b√°sicos de resoluci√≥n de un problema, lo que es un algoritmo, estructuras de control en C (como if, do-while, while, switch, for). Tembi√©n conocen las bibliotecas de funciones, Operaciones b√°sicas de E/S, <math.h> Reales, punteros y vectores en C, Operadores para punteros.
Avanzado: Nivel avanzado donde ya tienen los conocimientos al completo de la parte de programaci√≥n: los tipos de datos y variables que existen, los pasos b√°sicos de resoluci√≥n de un problema, lo que es un algoritmo, estructuras de control en C (como if, do-while, while, switch, for). Tembi√©n conocen las bibliotecas de funciones, Operaciones b√°sicas de E/S, <math.h> Reales, punteros y vectores en C, Operadores para punteros, struct, Funciones y procedimientos (Programaci√≥n modular, Par√°metros formales, Variables locales, paso de parametros a funciones, Paso por referencia, etc. SABEN TODO EL TEMARIO)
Responde de forma clara, concisa, did√°ctica, conversacional y motivadora.
Puedes resolver dudas sobre el temario, sintaxis, errores comunes y ayudar con ejercicios pr√°cticos.

El contenido del curso es el siguiente: ${temario}
Los ejercicios que se pueden realizar son los siguientes: ${ejercicios}

Si el estudiante pregunta por un ejercicio, proporciona una breve descripci√≥n y gu√≠a para resolverlo.
Si el estudiante pregunta por un error, proporciona una breve descripci√≥n del error y c√≥mo solucionarlo.
Si el estudiante pregunta por un truco o consejo, proporciona una breve descripci√≥n y c√≥mo aplicarlo.
Si el estudiante pregunta por un concepto o algo de teor√≠a, proporciona una breve descripci√≥n y ejemplos si es necesario.`;

// Mensaje de contexto para el modelo
// Este mensaje define el rol del modelo y su enfoque gracias a la variable del contexto
let messages = [
  { role: "system", content: contexto }
];

async function chatLoop() {
  console.log("\nüí¨ ¬øCon qu√© puedo ayudarte?. Escribe 'salir' para terminar.\n");

  while (true) {
    const input = readline.question("\tT√∫: ");
    if (input.toLowerCase() === "salir") break;

    // Agrega el mensaje del usuario al historial de mensajes, lo que permite mantener el contexto de la conversaci√≥n y proporciona una experiencia m√°s fluida y coherente. Aseguramos una buena interacci√≥n.
    messages.push({ role: "user", content: input });

    try {
      // Llamada a la API de OpenAI para obtener una respuesta
      const chatCompletion = await openai.chat.completions.create({
        model: "gpt-4.1-nano",
        messages: messages,
      });

      // Extrae la respuesta del modelo
      const reply = chatCompletion.choices[0].message.content.trim();
      console.log(`\n\tAsistente de C: ${reply}\n`);

      messages.push({ role: "assistant", content: reply });

      // Limita el historial de mensajes a las √∫ltimas 20 interacciones para evitar sobrecargar la conversaci√≥n
      // Mantiene el contexto relevante sin perder informaci√≥n importante
      if (messages.length > 20) {
        messages = [messages[0], ...messages.slice(-18)]; // almacena el primer mensaje del sistema y los √∫ltimos 18 mensajes
      }

    } catch (error) {
      console.error("‚ùå Error al conectar con la API:", error.message);
    }
  }
}

chatLoop();